#!/usr/bin/php
<?php

require_once('src/lib/config.php');
require_once('src/File.class.php');
require_once('src/Dir.class.php');

use \rkphplib\Exception;
use \rkphplib\File;
use \rkphplib\Dir;



/**
 *
 */
class Collector {

private $_plugins = [];


/**
 * Scan src/tok for *.class.php. Execute register for every class.
 *
 * @param string $dir
 */
public function scan($dir = 'src/tok') {
	Dir::exists($dir);
	$php_files = Dir::scanTree($dir, [ '.class.php' ]);
	$ignore = [ 'AMenu.class.php', 'Tokenizer.class.php' ];
	$obj = [];
	$n = 0;

	foreach ($php_files as $file) {
		if (in_array(basename($file), $ignore)) {
			continue;
		}

		require_once($file);
		$cname = '\\rkphplib'.substr(str_replace('/', '\\', $file), 3, -10);

		print "$file: $cname\n";
		$obj[$n] = new $cname();
		$this->register($obj[$n], $cname);
		$n++;
	}
}


/**
 * Register plugins
 *
 * @param Object $handler
 * @param string $cname
 */
public function register($handler, $cname) {

  $plugins = $handler->getPlugins($this);
	$this->_plugin[$cname] = [];

  foreach ($plugins as $name => $opt) {
		array_push($this->_plugin[$cname], $name);
  }
}


/**
 * Create plugin map. Add to Tokenizer class.
 *
 */
public function createMap() {
	$tokenizer = mb_substr(trim(File::load('src/tok/Tokenizer.class.php')), 0, -1);

	if (($pos = mb_strpos($tokenizer, '/** AUTO CREATED BY bin/plugin_map')) < 1) {
		throw new Exception('append point not found');
	}

	$tokenizer = mb_substr($tokenizer, 0, $pos);

	ksort($this->_plugin);

	$code = "/** AUTO CREATED BY bin/plugin_map */\n".'private function tryPluginMap($name) {'."\n\t".
		'static $map = ['."\n\t\t";

	foreach ($this->_plugin as $cname => $list) {
		$cname = mb_substr($cname, 14);
		$code .= "'$cname' => [ '".join("', '", $list)."' ],\n\t\t";
	}

	$code = mb_substr($code, 0, -4)."\n\t];\n\n\t".
		'foreach ($map as $cname => $list) {'."\n\t\t".
		'if (in_array($name, $list)) {'."\n\t\t\t".
		'require_once(__DIR__.\'/\'.$cname.\'.class.php\');'."\n\t\t\t".
		"\$cname = '\\\\rkphplib\\\\tok\\\\'.\$cname;\n\t\t\t".
		'$obj = new $cname();'."\n\t\t\t".
		'$this->register($obj);'."\n\t\t\t".
		'return;'."\n\t\t"."}\n\t}\n}\n\n}\n";

	File::save('src/tok/Tokenizer.class.php', $tokenizer.$code);
	print "src/tok/Tokenizer.class.php: tryPluginMap() has been updated\n";
}


}



/**
 * M A I N 
 */

$collector = new Collector();
$collector->scan();
$collector->createMap();
