#!/usr/bin/php
<?php

require_once 'src/tok/Tokenizer.class.php';
require_once 'src/lib/config.php';
require_once 'src/File.class.php';
require_once 'src/Dir.class.php';
require_once 'src/CLI.php';

use rkphplib\tok\TokPlugin;
use rkphplib\tok\Tokenizer;
use rkphplib\Exception;
use rkphplib\File;
use rkphplib\Dir;


/**
 * @author Roland Kujundzic
 */
class Collector {

private $_plugins = [];


/**
 * Scan src/tok for *.class.php. Execute register for every class.
 */
public function scan(string $dir) : void {
	Dir::exists($dir);
	$php_files = Dir::scanTree($dir, [ '.php', '!AMenu.class.php', '!Tokenizer.class.php', '!.iface.php', '!.trait.php' ]);
	$obj = [];
	$n = 0;

	foreach ($php_files as $file) {
		require_once $file;
		$cname = '\\rkphplib\\'.str_replace([ 'src/', '/', '.class.php', '.php' ], [ '', '\\', '', '' ], $file);

		// skip abstract class ...
		if (substr($cname, 0, 15) == '\rkphplib\tok\A') {
			continue;
		}

		if (strpos(File::head($file, 3, false)[2], 'namespace rkphplib\tok;') === false) {
			print "SKIP $file\n";
			continue;
		}

		print "$file: $cname\n";
		$obj[$n] = new $cname();
		$this->register($obj[$n], $cname);
		$n++;
	}
}


/**
 * Register plugins
 */
public function register(TokPlugin $handler, string $cname) : void {
	$dummy = new Tokenizer();

  $plugins = $handler->getPlugins($dummy);
	$this->_plugin[$cname] = [];

  foreach ($plugins as $name => $opt) {
		array_push($this->_plugin[$cname], $name);
  }
}


/**
 * Create plugin map. Add to Tokenizer class.
 */
public function createMap() {
	$tokenizer = mb_substr(trim(File::load('src/tok/Tokenizer.class.php')), 0, -1);
	$md5 = File::md5('src/tok/Tokenizer.class.php');

	if (($pos = mb_strpos($tokenizer, '// AUTO CREATED BY bin/plugin_map')) < 1) {
		throw new Exception('append point not found');
	}

	$tokenizer = mb_substr($tokenizer, 0, $pos);

	ksort($this->_plugin);

	$code = "// AUTO CREATED BY bin/plugin_map\n".'private function tryPluginMap(string $name) : void {'."\n\t".
		'static $map = ['."\n\t\t";

	foreach ($this->_plugin as $cname => $list) {
		$cname = mb_substr($cname, 14);
		$code .= "'$cname' => [ '".join("', '", $list)."' ],\n\t\t";
	}

	$s1 = "\n\t";
	$s2 = "\n\t\t";
	$s3 = "\n\t\t\t";
	$s4 = "\n\t\t\t\t";
	$code = mb_substr($code, 0, -4)."$s1];\n$s1".
		'foreach ($map as $cname => $list) {'.$s2.
		'if (in_array($name, $list)) {'.$s3.
		'$path = __DIR__."/$cname.class.php";'.$s3.
		'if (!is_file($path)) {'.$s4.
		'$path = __DIR__."/$cname.php";'.$s3."}\n$s3".
		'require_once $path;'.$s3.
		"\$cname = '".'\\\\rkphplib\\\\tok\\\\'."'.\$cname;$s3".
		'$obj = new $cname();'.$s3.
		'$this->register($obj);'.$s3.
		'return;'.$s2."}\n\t}\n}\n\n}\n";

	$new_code = $tokenizer.$code;

	if (md5($new_code) != $md5) {
		File::save('src/tok/Tokenizer.class.php', $tokenizer.$code);
		print "src/tok/Tokenizer.class.php: tryPluginMap() has been updated\n";
	}
	else {
		print "src/tok/Tokenizer.class.php: no change\n";
	}
}


}



/*
 * M A I N 
 */

if (!defined('SETTINGS_DSN')) {
	define('SETTINGS_DSN', 'mysqli://ignore:ignore@tcp+localhost/ignore');
}

\rkphplib\CLI::$desc = 'Scan src/tok directory and update Tokenizer->tryPluginMap';
if (!\rkphplib\CLI::syntax()) {
	return;
}

$collector = new Collector();
$collector->scan('src/tok');
$collector->createMap();
