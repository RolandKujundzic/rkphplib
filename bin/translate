#!/usr/bin/php
<?php

// assume: APP/php/rkphplib/bin/
require_once(dirname(dirname(dirname(__DIR__))).'/settings.php');

require_once(PATH_RKPHPLIB.'Database.class.php');
require_once(PATH_RKPHPLIB.'tok/TokPlugin.iface.php');
require_once(PATH_RKPHPLIB.'tok/TLanguage.class.php');
require_once(PATH_RKPHPLIB.'tok/Tokenizer.class.php');
require_once(PATH_RKPHPLIB.'File.class.php');
require_once(PATH_RKPHPLIB.'Dir.class.php');

use \rkphplib\Exception;
use \rkphplib\Database;
use \rkphplib\tok\TokPlugin;
use \rkphplib\tok\TLanguage;
use \rkphplib\tok\Tokenizer;
use \rkphplib\File;
use \rkphplib\Dir;


/**
 * Process {txt:} plugins.
 *
 * @author Roland Kujundzic <roland@kujundzic.de>
 */
class Translate {

/** @var Database $db */
private $db = null;

/** @var Tokenizer $tok */
private $tok = null;

/** @var TLanguage $t_lang */
private $t_lang = null;

/** @var vector $languages */
private $languages = [];



/**
 * Catch {language:[init|get]} plugin and return plugin text.
 */
public function getPlugins($tok) {
  $plugin = [
    'language:init' => TokPlugin::NO_PARAM | TokPlugin::REQUIRE_BODY,
    'language:get' => TokPlugin::NO_PARAM | TokPlugin::NO_BODY,
    'language' => 0
  ];

  return $plugin;
}


/**
 * Catch {language:init}. Return plugin text.
 *
 * @param string $arg
 * @return string
 */
public function tok_language_init($arg) {
	return '{language:init}'.$arg.'{:language}';
}


/**
 * Catch {language:get}. Return plugin text.
 * @return string
 */
public function tok_language_get() {
	return '{language:get}';
}


/**
 * Set language table.
 *
 * @param string $name
 * @param string $txt_lang (=de)
 */
public function setTable($name, $txt_lang = 'de') {
	$this->db = Database::getInstance();
	$table_desc = $this->db->getTableDesc($name);
	$this->languages = [];

	foreach ($table_desc as $column => $info) {
		if (strlen($column) != 2 || $info['type'] != 'text') {
			continue;
		}
		
		array_push($this->languages, $column);
	}

	if (count($this->languages) < 2) {
		throw new Exception('no languages detected', "name=$name, table_desc: ".print_r($table_desc, true));
	}

	$this->tok = new Tokenizer(Tokenizer::TOK_KEEP);
	$this->t_lang = new TLanguage();
	$this->tok->register($this->t_lang);
	$this->tok->register($this);
	$this->t_lang->tok_language_init([ 'table' => $name, 'default' => $txt_lang, 'txt' => $txt_lang ]);
}


/**
 * Load $file and return parsed content.
 *
 * @param string $file
 * @return string
 */
public function file($file) {
	$this->tok->load($file);
	return $this->tok->toString();
}


/**
 * Print log message.
 */
private function log($message) {
	print $message."\n";
}


/**
 * Translate all *.inc.html, *.conf and *.js files. Save translation to /LANG.
 * 
 * @param string $root_dir
 * @param string $language_table
 * @param string $default_language
 *
 */
public function run($root_dir, $language_table, $default_language) {
	$this->setTable($language_table, $default_language);

	$files = Dir::scanTree($root_dir, [ 'inc.html', 'conf', 'js' ], [ 'cms', 'data', 'php', 'setup' ]);

	foreach ($this->languages as $lang) {
		$this->t_lang->tok_language_init([ 'use' => $lang, 'default' => $default_language, 'txt' => $default_language, 
			'table' => $language_table ]);

		foreach ($files as $file) {
			$rel_path = str_replace($root_dir.'/', '', $file);
			$target = $root_dir.'/'.$lang.'/'.$rel_path;
			Dir::create(dirname($target), 0, true);
			$md5 = File::md5($file);
			$translation = $this->file($file);

			if (md5($translation) != $md5) {
				$this->log('create '.$target);
				File::save($target, $translation);
			}
		}
	}
}


}



/*
 * M A I N
 */

if (getcwd() != DOCROOT) {
	print "\nSYNTAX: ".$_SERVER['argv'][0]."\n";
	print "run in ".DOCROOT."\n";
	exit(1);
}

$translate = new Translate();
$translate->run(DOCROOT, 'language', 'de');
chdir('cms');
$translate->run('.', 'cms_language', 'en');

