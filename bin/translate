#!/usr/bin/php
<?php

// assume: APP/php/rkphplib/bin/
require_once(dirname(dirname(dirname(__DIR__))).'/settings.php');

require_once(PATH_RKPHPLIB.'Database.class.php');
require_once(PATH_RKPHPLIB.'tok/TLanguage.class.php');
require_once(PATH_RKPHPLIB.'tok/Tokenizer.class.php');
require_once(PATH_RKPHPLIB.'File.class.php');
require_once(PATH_RKPHPLIB.'Dir.class.php');

use \rkphplib\Database;
use \rkphplib\tok\TLanguage;
use \rkphplib\tok\Tokenizer;
use \rkphplib\File;
use \rkphplib\Dir;


/**
 * Process {txt:} plugins.
 *
 * @author Roland Kujundzic <roland@kujundzic.de>
 */
class Translate {

/** @var Database $db */
private $db = null;

/** @var Tokenizer $tok */
private $tok = null;

/** @var TLanguage $t_lang */
private $t_lang = null;

/** @var vector $languages */
private $languages = [];



/**
 * Set language table.
 *
 * @param string $name
 * @param string $txt_lang (=de)
 */
public function setTable($name, $txt_lang = 'de') {
	$this->db = Database::getInstance();
	$table_desc = $this->db->getTableDesc($name);
	$this->languages = [];

	foreach ($table_desc as $column => $info) {
		if (strlen($column) != 2 || $info['type'] != 'text' || !$info['is_null']) {
			continue;
		}
		
		array_push($this->languages, $column);
	}

	$this->tok = new Tokenizer(Tokenizer::TOK_KEEP);
	$this->t_lang = new TLanguage();
	$this->tok->register($this->t_lang);
	$this->t_lang->tok_language_init([ 'table' => $name, 'default' => $txt_lang, 'txt' => $txt_lang ]);
}


/**
 * Load $file and return parsed content.
 *
 * @param string $file
 * @return string
 */
public function file($file) {
	$this->tok->load($file);
	return $this->tok->toString();
}


/**
 * Print log message.
 */
private function log($message) {
	print $message."\n";
}


/**
 * Scan $directory. Copy files from $directory/js to ../js with FILE.[LANG].js suffix.
 *
 * @throws
 * @param string $directory
 */
public function scanjs($directory) {
	if (!Dir::exists($directory)) {
		return;
	}

	$parent_dir = dirname($directory);
	$this->log("cd $parent_dir");
	chdir($parent_dir);
	$js_source = basename($directory);
	Dir::exists($js_source, true);

	$js_target = '../'.$js_source;
	Dir::exists($js_target, true);

	$js_files = Dir::scanDir($js_source, [ 'js' ]);

	foreach ($this->languages as $lang) {
		foreach ($js_files as $file) {
			$target = $js_target.'/'.File::basename($file, true).'.'.$lang.'.js';
			$this->log("translate $file to $target");
			$this->t_lang->tok_language_init([ 'use' => $lang ]);
			File::save($target, $this->file($file));
		}
	}

	$this->log('cd '.DOCROOT);
	chdir(DOCROOT);
}


}



/*
 * M A I N
 */

$translate = new Translate();

if (!empty($_SERVER['argv'][1])) {
	if (Dir::exists($_SERVER['argv'][1])) {
		$translate->scan($_SERVER['argv'][1]);
	}
	else if (File::exists($_SERVER['argv'][1])) {
		print $translate->file($_SERVER['argv'][1]);
	}
	else {
		print "\nSYNTAX: ".$_SERVER['argv'][0]." [\$PWD|path_to_file]\n\n";
		exit(1);
	}
}
else {
	$translate->setTable('cms_language', 'en');
	$js_map = [ 'cms/src/js' ];
	foreach ($js_map as $dir) {
		$translate->scanjs($dir);
	}
}

