#!/usr/bin/php
<?php

// assume: APP/php/rkphplib/bin/
require_once(dirname(dirname(dirname(__DIR__))).'/settings.php');

require_once(PATH_RKPHPLIB.'Database.class.php');
require_once(PATH_RKPHPLIB.'tok/TokPlugin.iface.php');
require_once(PATH_RKPHPLIB.'tok/TLanguage.class.php');
require_once(PATH_RKPHPLIB.'tok/Tokenizer.class.php');
require_once(PATH_RKPHPLIB.'File.class.php');
require_once(PATH_RKPHPLIB.'Dir.class.php');

use \rkphplib\Database;
use \rkphplib\tok\Tokenizer;
use \rkphplib\tok\TokPlugin;
use \rkphplib\File;
use \rkphplib\Dir;


/**
 * Process {txt:} plugins.
 *
 * @author Roland Kujundzic <roland@kujundzic.de>
 */
class Translate implements TokPlugin {

/** @var Database $db */
private $db = null;

/** @var Tokenizer $tok */
private $tok = null;

/** @var TLanguage $t_lang */
private $t_lang = null;

/** @var vector $languages */
private $languages = [];



/**
 * Initialize database.
 *
 */
public function __construct() {
	$this->db = Database::getInstance();
}


/**
 * Return Tokenizer Plugin list:
 *
 * - autoescape, block, do, embed, extends, filter, flush, for, from, if, import, include, macro, sandbox, set, 
 *   spaceless, use, verbatim, v
 *
 * @param Tokenizer $tok
 * @return map<string:int>
 */
public function getPlugins($tok) {
	$this->tok = $tok;
	
	$plugin = [
		'txt' => TokPlugin::TOKCALL,
		'txt:js' => TokPlugin::TOKCALL,
		'ptxt' => TokPlugin::TOKCALL
	];

	return $plugin;
}


/**
 * Apply TLanguage plugins.
 *
 * @param string $action
 * @param string $param
 * @param string $arg
 * @return string
 */
public function tokCall($action, $param, $arg) {
	print "action=[$action] param=[$param] arg=[$arg]\n";
	exit(1);
	return '';
}


/**
 * Load and parse $file.
 * @return string
 */
public function load($file) {
	$this->tok->load($file);
	print $this->tok->toString();
}


/**
 * Scan $directory. Copy files from $directory/js to js with FILE.[LANG].js suffix.
 *
 * @throws
 * @param string $directory
 */
public function scan($directory) {
	$sysdir = basename($directory);
	Dir::exists($sysdir, true);

	$js_files = Dir::scanDir($directory, [ 'js' ]);

	foreach ($this->languages as $lang) {
		foreach ($js_files as $file) {
			$this->tok->load($file);
			File::save($sysdir.'/'.File::basename($file, true).'.'.$lang.'.js', $this->tok->toString());
		}
	}
}


}



/*
 * M A I N
 */

$tok = new Tokenizer();
$translate = new Translate();
$tok->register($translate);

if (!empty($_SERVER['argv'][1])) {
	if (Dir::exists($_SERVER['argv'][1])) {
		$translate->scan($_SERVER['argv'][1]);
	}
	else if (File::exists($_SERVER['argv'][1])) {
		$translate->load($_SERVER['argv'][1]);
	}
	else {
		print "\nSYNTAX: ".$_SERVER['argv'][0]." [\$PWD|path_to_file]\n\n";
		exit(1);
	}
}
else {
	$autodetect = [ 'src/js' ];
	foreach ($autodetect as $dir) {
		if (Dir::exists($dir)) {
			$translate->scan($dir);
		}
	}
}

